syntax = "proto3";

package cow_proto;

// @comments 推送信息
// @receive
message Welcome {
    // 客服信息
    message Customer {
        string name = 1;
        string wechat = 2;
    }
    // 客服信息
    repeated Customer customers = 1;
    // 附加配置
    // ios          ios 审核中 [true, false]
    // ver          版本号 [x.x.x]
    map<string, string> exts = 2;
    // 链接
    // recharge                 充值链接
    // ios_download             iOS 下载链接
    // android_download         Android 下载链接
    map<string, string> urls = 3;
    // 公告
    // gapp         健康游戏公告
    // cow_roll     牛牛滚动公告
    map<string, string> notices = 4;
}

// @comments 微信登录请求
// @post
message WechatLogin {
    // 微信UID
    string wechat_uid = 1;
    // 昵称
    string nickname = 2;
    // 头像URL
    string head = 3;
}

// @comments 令牌登录请求
// @post
message TokenLogin {
    // 令牌
    string token = 1;
}

// @comments 登录失败
// @receive
message LoginFailed {
    // 原因
    // 0 未知
    // 1 无效 Token
    int32 reason = 1;
}

// @comments 登录成功
// @receive
message LoginSuccess {
    // 登录令牌
    string token = 1;
    // 玩家 ID
    int32 player = 2;
}

// --------------------------------------↑登陆消息↑-----------------------------------------

// @comments 设置玩家附加信息请求
// @rpc response=SetPlayerExtResponse
message SetPlayerExtRequest {
    // 微信ID
    string wechat = 1;
    // 身份证
    string idcard = 2;
    // 姓名
    string name = 3;
}

// @comments 设置玩家附加信息结果
message SetPlayerExtResponse {}

// @comments 设置上级代理
// @rpc response=SetPlayerSupervisorResponse
message SetPlayerSupervisorRequest {
    // 上级代理 ID
    int32 player_id = 1;
}

// @comments 设置上级代理结果
message SetPlayerSupervisorResponse {}

// --------------------------------------↑个人消息↑-----------------------------------------

// @comment 玩家公开信息
message Player {
    // 玩家 ID
    int32 id = 1;

    // 昵称
    string nickname = 2;
    // 头像
    string head = 3;

    // 金币
    int32 money = 4;
    // VIP
    int64 vip = 5;

    // 微信号
    string wechat = 6;

    // 登录IP
    string ip = 7;
}

// @comments 玩家
message PlayerSecret {
    // 玩家主键
    int32 id = 1;
    // 注册时间
    string created_at = 2;

    // 微信UID
    string wechat_uid = 3;
    // 昵称
    string nickname = 4;
    // 头像
    string head = 5;

    // 金币
    int32 money = 6;
    // VIP
    int64 vip = 7;

    // 微信号
    string wechat = 8;
    // 身份证
    string idcard = 9;
    // 姓名
    string name = 10;

    // 上级代理
    int32 supervisor = 11;

    // 登录IP
    string ip = 12;
}

// 玩家信息掩码
enum PlayerMask {
    Unknown = 0x00;
    ID = 0x01;
    CreatedAt = 0x02;
    WechatUID = 0x04;
    Nickname = 0x08;
    Head = 0x10;
    Money = 0x20;
    Vip = 0x40;
    Wechat = 0x80;
    Idcard = 0x100;
    Name = 0x200;
    Supervisor = 0x400;
    Ip = 0x800;
    All = 0xFFF;
    AfterPlayerExt = 0x380;
    AfterPurchase = 0x60;
}

// @comments 拉取账号信息
// @rpc response=GetMyResponse
message GetMyRequest {
    // 掩码
    PlayerMask mask = 1;
}

// @comments 拉取账号信息结果
message GetMyResponse {
    // 账号信息
    PlayerSecret player = 1;
}

// @comments 拉取玩家公开信息
// @rpc response=GetPlayerResponse
message GetPlayerRequest {
    // 玩家 ID
    int32 player_id = 1;
    // 要获取的信息
    PlayerMask mask = 2;
}

// @comments 拉取玩家公开信息结果
message GetPlayerResponse {
    // 玩家信息
    Player player = 1;
}

// @comments 已经进入大厅
// @receive
message HallEntered {}

// @comments 在线人数
// @receive
message PlayerNumber {
    // 人数
    int32 number = 1;
}

// @comments 是否需要恢复游戏
// @receive
message Recover {
    // 是否需要恢复
    bool is = 1;
    // 游戏名称
    // cow          牛牛
    // red          红包
    // lever28      二八杠
    // gomoku       五子棋
    string name = 2;
}

// --------------------------------------↑大厅消息↑-----------------------------------------

// @comments 房间配置
message NiuniuRoomOption {
    // 庄家模式
    // 0 定庄
    // 1 轮庄
    // 2 抢庄
    int32 banker = 1;
    // 局数
    // 20 30 40
    int32 games = 2;
    // 模式
    // 0 普通
    // 1 疯狂
    int32 mode = 3;
    // 底分
    int32 score = 4;
}

// @comments 房间类型
enum NiuniuRoomType {
    // 约战
    Order = 0;
    // 代开
    PayForAnother = 1;
    // 流水
    Flowing = 2;
}

// @comments 房间
message NiuniuRoomData {
    // 房间玩家
    message PlayerData {
        // 玩家
        int32 player = 1;
        // 位置
        int32 pos = 2;
        // 是否准备
        bool ready = 3;
        // 是否断线
        bool lost = 4;
    }

    // 房间类型
    NiuniuRoomType type = 1;
    // 房间号
    int32 room_id = 2;
    // 房间配置
    NiuniuRoomOption option = 3;
    // 创建者
    int32 creator = 4;
    // 房主
    int32 owner = 5;
    // 房间玩家
    repeated PlayerData players = 6;
    // 入场限制
    int32 join_money = 7;
    // 是否游戏中
    bool gaming = 8;
    //模式
    string GameMode =9;
}

// @comments 查询代开房间
// @rpc response=NiuniuQueryPayForAnotherRoomListResponse
message NiuniuQueryPayForAnotherRoomListRequest {}

// @comments 查询代开房间结果
message NiuniuQueryPayForAnotherRoomListResponse {
    // 房间
    repeated NiuniuRoomData rooms = 1;
}

// @comments 查询流水房间
// @rpc response=NiuniuQueryFlowingRoomListResponse
message NiuniuQueryFlowingRoomListRequest {}

// @comments 查询流水房间结果
message NiuniuQueryFlowingRoomListResponse {
    // 房间
    repeated NiuniuRoomData rooms = 1;
}

// @comments 牛牛战绩
message NiuniuHistory {
    // 玩家
    message PlayerData {
        // 玩家 ID
        int32 id = 1;
        // 得分
        int32 points = 3;
        // 胜利场数
        int32 victories = 4;
    }

    // 房间类型
    NiuniuRoomType type = 1;
    // 房间 ID
    int32 room_id = 2;
    // 记录
    repeated PlayerData players = 3;
    // 时间
    string created_at = 4;
}

// @comments 查询战绩
// @rpc response=NiuniuQueryHistoryResponse
message NiuniuQueryHistoryRequest {}

// @comments 查询战绩结果
message NiuniuQueryHistoryResponse {
    // 牛牛战绩
    repeated NiuniuHistory histories = 1;
}

// @comments 创建房间
// @post
message NiuniuCreateRoom {
    // 模式
    NiuniuRoomType type = 1;
    // 房间配置
    NiuniuRoomOption option = 2;
}

// @comments 创建房间失败
// @receive
message NiuniuCreateRoomFailed {
    // 原因
    //  0 未知
    //  1 金币不足
    //  2 游戏已开始
    // -1 玩家已进入房间
    // -2 非合法的配置
    int32 reason = 1;
}

// @comments 房间被创建
// @receive
message NiuniuCreateRoomSuccess {
    // 房间号
    int32 room_id = 1;
}

// @comments 加入房间
// @post
message NiuniuJoinRoom {
    // 房间号
    int32 room_id = 1;
}

// @comments 加入房间失败
// @receive
message NiuniuJoinRoomFailed {
    // 原因
    //  0 未知
    //  1 房间不存在
    //  2 金币不足
    //  3 房间已满员
    // -1 玩家已进入房间
    int32 reason = 1;
}

// @comments 已加入房间
// @receive
message NiuniuJoinRoomSuccess {}

// @comments 解散房间
// @post
message NiuniuDismiss {
    // 房间号
    int32 room_id = 1;
}

// @comments 请求离开房间
// @post
message NiuniuLeaveRoom {}

// @comments 离开了房间
// @receive
message NiuniuLeftRoom {
    // 原因
    // 0 未知
    // 1 正常离开
    // 2 解散
    // 3 金币不足
    int32 reason = 1;
}

// @comments 房间状态更新
// @receive
message NiuniuUpdateRoom {
    // 状态
    NiuniuRoomData room = 1;
}

// @comments 切换准备/取消
// @post
message NiuniuSwitchReady {}

// @comments 开始游戏
// @post
message NiuniuStart {}

// @comments 游戏开始
// @receive
message NiuniuGameStarted {}

// @comments 回合开始
// @receive
message NiuniuRoundStarted {
    // 回合数
    int32 round_number = 1;
}

// @comments 操作结束时间
// @receive
message NiuniuDeadline {
    // 倒计时
    int64 id = 1;

}

// @comments 取消定时
// @receive
message NiuniuCancelDeadline {
    // ID
    int64 id = 1;
}

// @comments 继续
// @post
message NiuniuContinueWith {}

// @comments 游戏状态
message NiuniuRoundStatus {
    // 玩家游戏数据
    message PlayerData {
        // 玩家 ID
        int32 id = 1;
        // 积分
        int32 points = 2;
        // 是否抢庄
        bool grab = 3;
        // 倍率
        int32 rate = 4;
        // 已选择是否抢庄
        bool grab_committed = 5;
        // 已选择倍率
        bool rate_committed = 6;
        // 已配牌
        bool pokers_committed = 7;
    }

    // 游戏阶段
    enum RoundStep {
        // 空闲
        Idle = 0;
        // 选择庄家
        SpecifyBanker = 1;
        // 抢庄
        Grab = 2;
        // 抢庄动画
        GrabShow = 3;
        // 选择倍率
        SpecifyRate = 4;
        // 配牌
        CommitPokers = 5;
        // 小局结算
        RoundClear = 6;
        // 游戏结算
        GameFinally = 7;
    }

    // 阶段
    RoundStep step = 1;
    // 局数
    int32 round_number = 2;
    // 庄家
    int32 banker = 3;
    // 玩家数据
    repeated PlayerData players = 4;
    // 手牌
    repeated string pokers = 5;
}

// @comments 游戏状态更新
// @receive
message NiuniuUpdateRound {
    // 游戏状态
    NiuniuRoundStatus round = 1;
}

// @comments 要求选择庄家
// @receive
message NiuniuRequireSpecifyBanker {
    // 是否是自己操作
    bool is = 1;
}

// @comments 选择庄家
// @post
message NiuniuSpecifyBanker {
    // 指定的庄家 ID
    int32 banker = 1;
}

// @comments 要求抢庄
// @receive
message NiuniuRequireGrab {}

// @comments 抢庄
// @post
message NiuniuGrab {
    // 是否抢庄
    bool doing = 1;
}

// @comments 要求播放抢庄动画
// @receive
message NiuniuRequireGrabShow {
    // 玩家
    message PlayerData {
        // 玩家 ID
        int32 player = 1;
        // 是否抢庄
        bool grab = 2;
    }

    repeated PlayerData players = 1;
}

// @comments 发牌4
// @receive
message NiuniuDeal4 {
    // 牌
    repeated string pokers = 1;
}

// @comments 要求闲家选择倍率
// @receive
message NiuniuRequireSpecifyRate {
    // 是否是自己操作
    bool is = 1;
}

// @comments 闲家选择倍率
// @post
message NiuniuSpecifyRate {
    // 倍率
    int32 rate = 1;
}

// @comments 发牌1
// @receive
message NiuniuDeal1 {
    // 牌
    string poker = 1;
    // 最佳牌型
    string best_type = 2;
    // 最佳配牌
    repeated string best_pokers = 3;
}

// @comments 提交配牌
// @post
message NiuniuCommitPokers {
    // 牌
    repeated string pokers = 1;
}

// @comments 小局清算
// @receive
message NiuniuRoundClear {
    // 结算结果
    message PlayerData {
        // 玩家
        int32 player = 1;
        // 总分
        int32 points = 2;
        // 牌型
        // boom 炸弹
        // full_house 葫芦
        // nn 牛牛
        // n[1-9] 牛1 - 牛9
        // n0 无牛
        // straight_flush 同花顺
        // flush 同花
        // straight 顺子
        string type = 3;
        // 权重
        int32 weight = 4;
        // 倍率
        int32 rate = 5;
        // 得分
        int32 this_points = 6;
        // 手牌
        repeated string pokers = 7;
    }

    // 结果
    repeated PlayerData players = 1;
    // 时间
    string finally_at = 2;
}

// @comments 游戏清算
// @receive
message NiuniuGameFinally {
    // 结算结果
    message PlayerData {
        // 玩家
        int32 player = 1;
        // 总分
        int32 points = 2;
        // 胜场
        int32 victories = 3;
    }

    // 结果
    repeated PlayerData players = 1;
    // 时间
    string finally_at = 2;
}

// @comments 牛牛切换到后台
// @post
message NiuniuSwitchToBackground {}

// @comments 牛牛切换到前台
// @postclear
message NiuniuSwitchToForeground {}

// --------------------------------------↑牛牛↑-----------------------------------------

// @comments 红包配置
message RedBagOption {
    // 金币数
    int32 money = 1;
    // 人数
    int32 number = 2;
    // 尾数
    repeated int32 mantissa = 3;
}

// @comments 创建红包
// @post
message RedCreateBag {
    // 配置
    RedBagOption option = 1;
}

// @comments 红包创建失败
// @receive
message RedCreateBagFailed {
    // 原因
    //  0 未知
    //  1 金币不足
    // -1 非合法的配置
    int32 reason = 1;
}

// @comments 红包创建成功
// @receive
message RedCreateBagSuccess {
    // 红包 ID
    int32 id = 1;
}

// @comments 红包
message RedBag {
    // ID
    int32 id = 1;
    // 配置
    RedBagOption option = 2;
    // 创建者
    int32 creator = 4;
    // 已抢红包玩家
    repeated int32 players = 3;
}

// @comments 红包列表
// @receive
message RedUpdateBagList {
    // 列表
    repeated RedBag bags = 1;
}

// @comments 抢红包
// @post
message RedGrab {
    // 红包 ID
    int32 id = 1;
}

// @comments 抢红包失败
// @receive
message RedGrabFailed {
    // 原因
    // 0 未知
    // 1 红包不存在
    // 2 金币不足
    // 3 已被抢完
    int32 reason = 1;
}

// @comments 抢红包成功
// @receive
message RedGrabSuccess {}

// @comments 离开当前红包
// @post
message RedLeave {}

// @comments 红包销毁时间
// @receive
message RedDeadline {
    // ID
    int64 id = 1;
    // 时间戳
    int64 stamp = 2;
}

// @comments 红包详情刷新
// @receive
message RedUpdateBag {
    // 红包详情
    RedBag bag = 1;
}

// @comments 红包结算
message RedBagClear {
    // 庄家
    message CreatorData {
        // 玩家
        int32 player = 1;
        // 支出
        int32 cost = 2;
        // 赔付收入
        int32 get = 3;
        // 赔付收入的手续费
        int32 charge = 4;
    }
    // 玩家
    message PlayerData {
        // 玩家
        int32 player = 1;
        // 收入
        int32 grab = 2;
        // 抢到红包的时间
        string grab_at = 7;
        // 是否是创建者
        bool creator = 8;
        // 赔付支出
        int32 pay = 4;
        // 收入的手续费
        int32 charge = 6;
    }

    // ID
    int32 id = 1;
    // 配置
    RedBagOption option = 2;
    // 庄家
    CreatorData creator = 3;
    // 已抢红包玩家
    repeated PlayerData players = 4;
    // 时长
    int32 used_time = 5;
}

// @comments 获取红包结果
// @rpc response=RedGetBagClearResponse
message RedGetBagClearRequest {}

// @comments 获取红包结果
message RedGetBagClearResponse {
    // 结果
    RedBagClear bag = 1;
}

// @comments 已发红包结算
// @receive
message RedHandsBagSettled {
    // 结果
    RedBagClear bag = 1;
}

// @comments 红包销毁
// @receive
message RedBagDestroyed {
    int32 id = 1;
}

// @comments 获取红包历史
// @rpc response=RedGetHistoryResponse
message RedGetHistoryRequest {}

// @comments 获取红包历史结果
message RedGetHistoryResponse {
    // 我抢的
    repeated RedBagClear grabs = 1;
    // 我发的
    repeated RedBagClear hands = 2;
}


// --------------------------------------↑红包↑-----------------------------------------

// @comments 红包配置
message Lever28BagOption {
    // 金币数
    int32 money = 1;
}

// @comments 创建红包
// @post
message Lever28CreateBag {
    // 配置
    Lever28BagOption option = 1;
}

// @comments 红包创建失败
// @receive
message Lever28CreateBagFailed {
    // 原因
    // 0 未知
    // 1 金币不足
    int32 reason = 1;
}

// @comments 红包创建成功
// @receive
message Lever28CreateBagSuccess {
    // 红包 ID
    int32 id = 1;
}

// @comments 红包
message Lever28Bag {
    // ID
    int32 id = 1;
    // 配置
    Lever28BagOption option = 2;
    // 创建者
    int32 creator = 4;
    // 已抢红包玩家
    repeated int32 players = 3;
}

// @comments 红包列表
// @receive
message Lever28UpdateBagList {
    // 列表
    repeated Lever28Bag bags = 1;
}

// @comments 抢红包
// @post
message Lever28Grab {
    // 红包 ID
    int32 id = 1;
}

// @comments 抢红包失败
// @receive
message Lever28GrabFailed {
    // 原因
    // 0 未知
    // 1 红包不存在
    // 2 金币不足
    // 3 已被抢完
    int32 reason = 1;
}

// @comments 抢红包成功
// @receive
message Lever28GrabSuccess {}

// @comments 离开当前红包
// @post
message Lever28Leave {}

// @comments 红包销毁时间
// @receive
message Lever28Deadline {
    // ID
    int64 id = 1;
    // 时间戳
    int64 stamp = 2;
}

// @comments 红包详情刷新
// @receive
message Lever28UpdateBag {
    // 红包详情
    Lever28Bag bag = 1;
}

// @comments 红包结算
message Lever28BagClear {
    // 玩家
    message PlayerData {
        // 玩家信息
        int32 player = 1;
        // 抢到金币数
        int32 grab = 3;
        // 抢到金币的手续费
        int32 grab_charge = 4;
        // 赔付金币数
        int32 pay = 2;
        // 赢得金币数
        int32 get = 5;
        // 赢得金币的手续费
        int32 get_charge = 6;
        // 牌面
        repeated int32 mahjong = 7;
        // 抢到红包的时间
        string grab_at = 8;
        // 创建者
        bool creator = 9;
    }

    // ID
    int32 id = 1;
    // 配置
    Lever28BagOption option = 2;
    // 已抢红包玩家
    repeated PlayerData players = 3;
    // 花费多长时间抢完
    int32 used_time = 4;
}

// @comments 获取红包结果
// @rpc response=Lever28GetBagClearResponse
message Lever28GetBagClearRequest {}

// @comments 获取红包结果
message Lever28GetBagClearResponse {
    // 结果
    Lever28BagClear bag = 1;
}

// @comments 红包销毁
// @receive
message Lever28BagDestroyed {
    int32 id = 1;
}

// @comments 获取红包历史
// @rpc response=Lever28GetHistoryResponse
message Lever28GetHistoryRequest {}

// @comments 获取红包历史结果
message Lever28GetHistoryResponse {
    // 我抢的
    repeated Lever28BagClear grabs = 1;
    // 我发的
    repeated Lever28BagClear hands = 2;
}


// @comments --------------------------------------↑二八杠↑-----------------------------------------

// @comments 创建房间
// @post
message GomokuCreateRoom {}

// @comments 创建房间失败
// @receive
message GomokuCreateRoomFailed {
    // 原因
    //  0 未知
    // -1 玩家已进入房间
    int32 reason = 1;
}

// @comments 房间创建成功
// @receive
message GomokuCreateRoomSuccess {
    // 房间 ID
    int32 room_id = 1;
}

// @comments 加入房间
// @post
message GomokuJoinRoom {
    // 房间 ID
    int32 room_id = 1;
}

// @comments 加入房间失败
// @receive
message GomokuJoinRoomFailed {
    // 原因
    //  0 未知
    //  1 房间不存在
    //  2 房间已满员
    // -1 玩家已进入房间
    int32 reason = 1;
}

// @comments 已进入房间
// @receive
message GomokuJoinRoomSuccess {}

// @comments 设置学费
// @post
message GomokuSetCost {
    int32 cost = 1;
}

// @comments 设置学费失败
// @receive
message GomokuSetRoomCostFailed {
    // 原因
    //  0 未知
    //  1 数额不合法
    //  2 金币不足
    // -1 玩家未在房间
    // -2 没有权限
    int32 reason = 1;
}

// @comments 房间信息
message GomokuRoom {
    // 房间 ID
    int32 id = 1;
    // 创建者
    int32 creator = 2;
    // 学生
    int32 student = 3;
    // 学费
    int32 cost = 4;
}

// @comments 更新房间信息
// @receive
message GomokuUpdateRoom {
    // 房间
    GomokuRoom room = 1;
}

// @comments 离开房间
// @post
message GomokuLeave {}

// @comments 解散房间
// @post
message GomokuDismiss {}

// @comments 已离开房间
// @receive
message GomokuLeft {
    // 原因
    // 0 未知
    // 1 解散
    // 2 主动离开
    int32 reason = 1;
}

// @comments 开始游戏
// @post
message GomokuStart {}

// @comments 游戏已开始
// @receive
message GomokuStarted {}

// @comments 更新回合
// @receive
message GomokuUpdateRound {
    // 回合数
    int32 round_number = 1;
    // 盘面
    // 15 * 15
    repeated int32 board = 2;
}

// @comments 走棋
// @receive
message GomokuRequirePlay {
    // 是否自己走棋
    bool is = 1;
}

// @comments 走棋倒计时
// @receive
message GomokuUpdatePlayDeadline {
    // ID
    int64 id = 1;
    // 时间戳
    int64 stamp = 2;
    // 是否是自己
    bool is = 3;
}

// @comments 走棋
// @post
message GomokuPlay {
    // 15 * 15
    // 1 - 15
    int32 x = 1;
    int32 y = 2;
}

// @comments 认输
// @post
message GomokuSurrender {}

// @comments 你赢了
// @receive
message GomokuVictory {}

// @comments 你输了
// @receive
message GomokuLost {}

// @comments 金币不足
// @receive
message GomokuMoneyNoEnough{
}

// @comments 五子棋战绩
message GomokuHistory {
    // 对手玩家
    int32 player_id = 1;
    // 学费
    int32 cost = 3;
    // 时间
    string created_at = 4;
}
// @comments 查询五子棋战绩请求
// @rpc response=GomokuGetHistoryResponse
message GomokuGetHistoryRequest {}

// @comments 查询五子棋战绩结果
message GomokuGetHistoryResponse {
    // 结果
    repeated GomokuHistory histories = 1;
}
// @comments 红包切换到后台
// @post
message GomokuSwitchToBackground {}

// @comments 红包切换到前台
// @post
message GomokuSwitchToForeground {}

// --------------------------------------↑五子棋↑-----------------------------------------

