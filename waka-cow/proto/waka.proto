syntax = "proto3";

package waka;

option java_package = "com.liuhan907.waka";

// @comments 启用游客
// @receive
message EnableVisitor {
    // 是否启用
    bool enable = 1;
}

// @comments 微信登录请求
// @post
message WechatLogin {
    // 微信UID
    string wechat_uid = 1;
    // 昵称
    string nickname = 2;
    // 头像URL
    string head = 3;
}

// @comments 令牌登录请求
// @post
message TokenLogin {
    // 令牌
    string token = 1;
}

// @comments 登录失败
// @receive
message LoginFailed {
    // 原因
    // 0 未知
    // 1 无效 Token
    int32 reason = 1;
}

// @comments 登录成功
// @receive
message LoginSuccess {
    // 登录令牌
    string token = 1;
}

// --------------------------------------↑登陆消息↑-----------------------------------------

// @comments 设置玩家附加信息请求
// @rpc response=SetPlayerExtResponse
message SetPlayerExtRequest {
    // 微信ID
    string wechat = 1;
    // 身份证
    string idcard = 2;
    // 姓名
    string name = 3;
}

// @comments 设置玩家附加信息结果
message SetPlayerExtResponse {}

// @comments 设置玩家代理请求
// @rpc response=SetPlayerAgentResponse
message SetPlayerAgentRequest {
    // 代理的玩家 ID
    int32 player_id = 1;
}

// @comments 设置玩家代理结果
message SetPlayerAgentResponse {}

// --------------------------------------↑个人消息↑-----------------------------------------

// @comment 玩家公开信息
// @receive
message Player {
    // 玩家 ID
    int32 id = 1;
    // 昵称
    string nickname = 2;
    // 头像
    string head = 3;
    // 金币
    int32 money = 4;
    // VIP
    int64 vip = 5;

    // 微信号
    string wechat = 6;

    // 登录IP
    string ip = 7;
}

// @comments 玩家
// @receive
message PlayerSecret {
    // 玩家主键
    int32 id = 1;
    // 微信UID
    string wechat_uid = 2;
    // 昵称
    string nickname = 3;
    // 头像
    string head = 4;

    // 微信号
    string wechat = 5;
    // 身份证
    string idcard = 6;
    // 姓名
    string name = 7;

    // 金币
    int32 money = 8;
    // VIP
    int64 vip = 9;

    // 代理的玩家 ID
    int32 agent_id = 10;

    // 注册时间
    string created_at = 11;

    // 登录IP
    string ip = 12;
}

// @comments 已经进入大厅
// @receive
message HallEntered {
    // 玩家信息
    PlayerSecret player = 1;
}

// @comments 推送信息
// @receive
message Welcome {
    // 客服信息
    message Customer {
        string name = 1;
        string wechat = 2;
    }

    // 客服信息
    repeated Customer customers = 1;
    // 滚动公告
    string notice = 2;
    // 公告
    string notice_big = 3;
    // 支付链接
    string pay_url = 4;
    // 后台注册链接
    string register_url = 5;
    // 后台登录链接
    string login_url = 6;
}

// @comments 在线人数
// @receive
message PlayerNumber {
    // 人数
    int32 number = 1;
}

// @comments 是否需要恢复游戏
// @receive
message Recover {
    // 是否需要恢复
    bool is = 1;
    // 游戏名称
    // cow2 牛牛
    // red 红包
    // lever28 二八杠
    string name = 2;
}

// --------------------------------------↑大厅消息↑-----------------------------------------

// @comments 房间类型
enum NiuniuRoomType {
    // 约战
    Order = 0;
    // 代开
    PayForAnother = 1;
    // 代理
    Agent = 2;
}

// @comments 房间配置
message NiuniuRoomOption {
    // 庄家模式
    // 0 定庄
    // 1 轮庄
    // 2 抢庄
    int32 banker = 1;
    // 局数
    // 20 30 40
    int32 games = 2;
    // 模式
    // 0 普通
    // 1 疯狂
    int32 mode = 3;
    // 是否AA
    bool isAA = 4;
    // 底分
    int32 score = 5;
}

// @comments 房间
message NiuniuRoomData1 {
    // 房间号
    int32 id = 1;
    // 房间配置
    NiuniuRoomOption option = 2;
    // 创建者
    string creator = 5;
    // 房主
    string owner = 4;
    // 房间玩家
    int32 players = 6;
    // 入场分数
    int32 enter_money = 8;
    // 离场分数
    int32 leave_money = 9;
    // 是否游戏中
    bool gaming = 10;
}

// @comments 房间
message NiuniuRoomData2 {
    // 房间玩家
    message RoomPlayer {
        // 玩家
        Player player = 1;
        // 位置
        int32 pos = 2;
        // 是否准备
        bool ready = 3;
        // 是否断线
        bool lost = 4;
    }

    // 房间类型
    NiuniuRoomType type = 1;
    // 房间号
    int32 id = 2;
    // 房间配置
    NiuniuRoomOption option = 3;
    // 创建者
    Player creator = 5;
    // 房主
    Player owner = 4;
    // 房间玩家
    repeated RoomPlayer players = 6;
    // 观战玩家
    repeated Player observers = 7;
    // 入场分数
    int32 enter_money = 8;
    // 离场分数
    int32 leave_money = 9;
    // 是否游戏中
    bool gaming = 10;
}

// @comments 查询代开房间
// @rpc response=NiuniuQueryPayForAnotherRoomListResponse
message NiuniuQueryPayForAnotherRoomListRequest {}

// @comments 查询代开房间结果
message NiuniuQueryPayForAnotherRoomListResponse {
    // 房间
    repeated NiuniuRoomData1 rooms = 2;
}

// @comments 查询代理房间数量
// @rpc response=NiuniuQueryAgentRoomCountResponse
message NiuniuQueryAgentRoomCountRequest {
    // 查询代理的玩家 ID 对应的代理的房间
    int32 player_id = 1;
}

// @comments 查询代理房间数量结果
message NiuniuQueryAgentRoomCountResponse {
    // 房间数
    int32 number = 1;
}

// @comments 查询代理房间
// @rpc response=NiuniuQueryAgentRoomListResponse
message NiuniuQueryAgentRoomListRequest {
    // 范围条件
    message RangeCondition {
        int32 start = 1;
        int32 number = 2;
    }

    // 查询代理的玩家 ID 对应的代理的房间
    int32 player_id = 1;
    // 查询范围
    RangeCondition range = 2;
}

// @comments 查询代理房间结果
message NiuniuQueryAgentRoomListResponse {
    // 代理房间
    repeated NiuniuRoomData1 rooms = 2;
}

// @comments 牛牛战绩
message NiuniuRecord {
    // 玩家记录
    message Player {
        // 玩家 ID
        int32 id = 1;
        // 昵称
        string nickname = 2;
        // 得分
        int32 points = 3;
        // 胜利场数
        int32 victories = 4;
    }

    // 房间 ID
    int32 room_id = 1;
    // 房间类型
    // 0 玩家房间
    // 1 代理房间
    int32 option = 2;
    // 记录
    repeated Player players = 3;
    // 时间
    string created_at = 4;
}

// @comments 查询战绩
// @rpc response=NiuniuQueryRecordResponse
message NiuniuQueryRecordRequest {}

// @comments 查询战绩结果
message NiuniuQueryRecordResponse {
    // 牛牛战绩
    repeated NiuniuRecord records = 1;
}

// @comments 创建房间
// @comments 此消息用于创建游戏房间
// @comments 同时用于创建约战房间和代开房间
// @comments 当创建者创建房间后，即已经进入房间
// @post
message NiuniuCreateRoom {
    // 模式
    NiuniuRoomType type = 1;
    // 房间配置
    NiuniuRoomOption option = 2;
}

// @comments 创建房间失败
// @receive
message NiuniuCreateRoomFailed {
    // 原因
    // 0 未知
    // 1 金币不足
    // 2 已在房间
    // 3 配置不合法
    int32 reason = 1;
}

// @comments 房间被创建
// @receive
message NiuniuRoomCreated {}

// @comments 加入房间
// @comments 这条消息可以加入玩家创建的房间和代理的在线房间
// @post
message NiuniuJoinRoom {
    // 房间号
    int32 room_id = 1;
}

// @comments 加入房间失败
// @receive
message NiuniuJoinRoomFailed {
    // 原因
    // 0 未知
    // 1 金币不足
    // 2 已在房间
    // 3 房间不存在
    int32 reason = 1;
}

// @comments 已加入房间
// @receive
message NiuniuRoomJoined {
    // 房间信息
    NiuniuRoomData2 room = 1;
}

// @comments 离开房间
// @post
message NiuniuLeaveRoom {}

// @comments 已离开房间
// @receive
message NiuniuRoomLeft {}

// @comments 因房主解散离开了房间
// @receive
message NiuniuRoomLeftByDismiss {}

// @comments 因金币不足离开了房间
// @receive
message NiuniuRoomLeftByMoneyNotEnough {}

// @comments 房间状态更新
// @receive
message NiuniuUpdateRoom {
    // 房间状态
    NiuniuRoomData2 room = 1;
}

// @comments 切换准备/取消
// @post
message NiuniuSwitchReady {}

// @comments 切换玩家/观战者
// @post
message NiuniuSwitchRole {}

// @comments 解散房间
// @comments 对于约战房间只有房主可以解散
// @comments 对于代开房间只有创建者可以解散
// @post
message NiuniuDismiss {
    // 房间号
    int32 room_id = 1;
}

// @comments 倒数计时
// @receive
message NiuniuCountdown {
    // 时间
    int32 number = 1;
}

// @comments 开始游戏
// @comments 只有房主可以开始
// @post
message NiuniuStart{}

// @comments 游戏已开始
// @receive
message NiuniuStarted{
    int32 round_number = 1;
}

// @comments 游戏状态
message NiuniuRoundStatus {
    // 玩家游戏数据
    message RoundPlayer {
        // 玩家 ID
        int32 id = 1;
        // 积分
        int32 points = 2;
        // 是否抢庄
        bool grab = 3;
        // 倍率
        int32 rate = 4;
        // 已选择是否抢庄
        bool grab_committed = 5;
        // 已选择倍率
        bool rate_committed = 6;
        // 已配牌
        bool pokers_committed = 7;
    }

    // 游戏阶段
    // require_specify_banker       选择庄家
    // require_grab                 抢庄
    // grab_animation               抢庄动画
    // require_specify_rate         选择倍率
    // require_commit_pokers        配牌
    // round_clear                  小局结算
    // round_finally                大局结算
    string step = 6;
    // 游戏所属房间
    int32 room_id = 1;
    // 当前局数
    int32 round_number = 2;
    // 玩家数据
    repeated RoundPlayer players = 3;
    // 本局庄家
    int32 banker = 4;
    // 玩家手牌
    repeated string pokers = 5;
}

// @comments 游戏状态更新
// @receive
message NiuniuUpdateRound {
    // 游戏状态
    NiuniuRoundStatus round = 1;
}

// @comments 要求选择庄家
// @receive
message NiuniuRequireSpecifyBanker {
    // 是否是自己操作
    bool is = 1;
}

// @comments 选择庄家
// @post
message NiuniuSpecifyBanker {
    // 指定的庄家 ID
    int32 banker = 1;
}

// @comments 要求抢庄
// @receive
message NiuniuRequireGrab {}

// @comments 抢庄
// @post
message NiuniuGrab {
    // 是否抢庄
    bool doing = 1;
}

// @comments 抢庄动画
// @receive
message NiuniuGrabAnimation {
    // 玩家
    message GrabPlayer {
        // 玩家 ID
        int32 player_id = 1;
        // 是否抢庄
        bool grab = 2;
    }

    repeated GrabPlayer players = 1;
}

// @comments 发牌4
// @receive
message NiuniuDeal4 {
    // 牌
    repeated string pokers = 1;
}

// @comments 要求闲家选择倍率
// @receive
message NiuniuRequireSpecifyRate {
    // 是否是自己操作
    bool is = 1;
}

// @comments 闲家选择倍率
// @post
message NiuniuSpecifyRate {
    // 倍率
    int32 rate = 1;
}

// @comments 发牌1
// @receive
message NiuniuDeal1 {
    // 牌
    string poker = 1;
    // 最佳牌型
    string type = 2;
    // 最佳手牌
    repeated string pokers = 3;
}

// @comments 配牌
// @post
message NiuniuCommitPokers {
    // 牌
    repeated string pokers = 1;
}

// @comments 结算失败
// @receive
message NiuniuSettleFailed {}

// @comments 结算成功
// @receive
message NiuniuSettleSuccess {}

// @comments 动画已完成
// @post
message NiuniuContinueWith {}

// @comments 小局结束
// @receive
message NiuniuRoundClear {
    // 结算结果
    message RoundClearPlayer {
        // 玩家
        Player player = 1;
        // 牌型
        // boom 炸弹
        // full_house 葫芦
        // nn 牛牛
        // n[1-9] 牛1 - 牛9
        // n0 无牛
        // straight_flush 同花顺
        // flush 同花
        // straight 顺子
        string type = 2;
        // 权重
        int32 weight = 7;
        // 倍率
        int32 rate = 3;
        // 得分
        int32 this_points = 4;
        // 手牌
        repeated string pokers = 5;
        // 总分
        int32 points = 6;
    }

    // 结果
    repeated RoundClearPlayer players = 1;
    // 时间
    string finally_at = 2;
}

// @comments 约战清算
// @receive
message NiuniuRoundFinally {
    // 结算结果
    message RoundFinallyPlayer {
        // 玩家
        Player player = 1;
        // 总分
        int32 points = 2;
        // 胜场
        int32 victories = 3;
    }

    // 结果
    repeated RoundFinallyPlayer players = 1;
    // 时间
    string finally_at = 2;
}

// --------------------------------------↑牛牛↑-----------------------------------------

// @comments 红包配置
message RedRedPaperBagOption {
    // 金币数
    int32 money = 1;
    // 人数
    int32 number = 2;
    // 尾数
    repeated int32 mantissa = 3;
}

// @comments 创建红包
// @post
message RedCreateRedPaperBag {
    // 配置
    RedRedPaperBagOption option = 1;
}

// @comments 红包创建失败
// @receive
message RedCreateRedPaperBagFailed {
    // 原因
    // 0 未知
    // 1 金币不足
    int32 reason = 1;
}

// @comments 红包创建成功
// @receive
message RedCreateRedPaperBagSuccess {
    // 红包 ID
    int32 id = 1;
}

// @comments 红包 1
message RedRedPaperBag1 {
    // 抢红包玩家
    message RedPlayer {
        // 昵称
        string nickname = 1;
        // 头像
        string head = 2;
    }

    // ID
    int32 id = 1;
    // 配置
    RedRedPaperBagOption option = 2;
    // 已抢红包玩家数
    int32 playerNumber = 3;
    // 创建者信息
    RedPlayer creator = 4;
    // 我是否抢了这个红包
    bool my_grabbed = 5;
}

// @comments 红包 2
message RedRedPaperBag2 {
    // ID
    int32 id = 1;
    // 配置
    RedRedPaperBagOption option = 2;
    // 已抢红包玩家
    repeated Player players = 3;
}

// @comments 红包 3
message RedRedPaperBag3 {
    // 红包庄家
    message RedCreator {
        // 玩家信息
        Player player = 1;
        // 获得的赔付
        // 未扣除手续费
        int32 get = 2;
        // 支出
        int32 cost = 3;
        // 手续费
        int32 charge = 4;
    }
    // 抢红包玩家
    message RedPlayer {
        // 玩家信息
        Player player = 1;
        // 抢到多少
        // 未扣除手续费
        int32 grab = 2;
        // 我赔付了多少
        int32 pay = 4;
        // 手续费
        int32 charge = 6;
        // 抢到红包的时间
        string grab_at = 7;
        // 是否是创建者
        bool creator = 8;
    }

    // ID
    int32 id = 1;
    // 配置
    RedRedPaperBagOption option = 2;
    // 庄家
    RedCreator creator = 3;
    // 已抢红包玩家
    repeated RedPlayer players = 4;
    // 花费多长时间抢完
    int32 used_time = 5;
}

// @comments 红包列表
// @receive
message RedUpdateRedPaperBagList {
    // 列表
    repeated RedRedPaperBag1 bags = 2;
}

// @comments 抢红包
// @post
message RedGrab {
    // 红包 ID
    int32 id = 1;
}

// @comments 抢红包失败
// @receive
message RedGrabFailed {
    // 原因
    // 0 未知
    // 1 红包不存在
    // 2 金币不足
    // 3 人数已满
    int32 reason = 1;
}

// @comments 抢红包成功
// @receive
message RedGrabSuccess {}

// @comments 离开当前红包
// @post
message RedLeave {}

// @comments 红包剩余时间
// @receive
message RedRedPaperBagCountdown {
    // 时间
    int32 number = 1;
}

// @comments 红包详情刷新
// @receive
message RedUpdateRedPaperBag {
    // 红包详情
    RedRedPaperBag2 bag = 1;
}

// @comments 获取红包结果
// @rpc response=RedGetRedPaperBagResultResponse
message RedGetRedPaperBagResultRequest {}

// @comments 获取红包结果
message RedGetRedPaperBagResultResponse {
    // 结果
    RedRedPaperBag3 bag = 2;
}

// @comments 红包销毁
// @receive
message RedRedPaperBagDestory {
    int32 id = 1;
}

// @comments 获取红包历史
// @rpc response=RedGetHistoryResponse
message RedGetHistoryRequest {}

// @comments 获取红包历史结果
message RedGetHistoryResponse {
    // 我抢的
    repeated RedRedPaperBag3 grabs = 1;
    // 我发的
    repeated RedRedPaperBag3 hands = 2;
}

// @comments 已发红包结算
// @receive
message RedHandsRedPaperBagSettled {
    // 结果
    RedRedPaperBag3 bag = 1;
}

// --------------------------------------↑红包↑-----------------------------------------

// @comments 红包配置
message Lever28RedPaperBagOption {
    // 金币数
    int32 money = 1;
}

// @comments 创建红包
// @post
message Lever28CreateRedPaperBag {
    // 配置
    Lever28RedPaperBagOption option = 1;
}

// @comments 红包创建失败
// @receive
message Lever28CreateRedPaperBagFailed {
    // 原因
    // 0 未知
    // 1 金币不足
    int32 reason = 1;
}

// @comments 红包创建成功
// @receive
message Lever28CreateRedPaperBagSuccess {
    // 红包 ID
    int32 id = 1;
}

// @comments 红包 1
message Lever28RedPaperBag1 {
    // 抢红包玩家
    message RedPlayer {
        // 昵称
        string nickname = 1;
        // 头像
        string head = 2;
    }

    // ID
    int32 id = 1;
    // 配置
    Lever28RedPaperBagOption option = 2;
    // 已抢红包玩家数
    int32 playerNumber = 3;
    // 创建者
    RedPlayer creator = 4;
    // 我是否抢了这个红包
    bool my_grabbed = 5;
}

// @comments 红包 2
message Lever28RedPaperBag2 {
    // ID
    int32 id = 1;
    // 配置
    Lever28RedPaperBagOption option = 2;
    // 已抢红包玩家
    repeated Player players = 3;
}

// @comments 红包 3
message Lever28RedPaperBag3 {
    // 抢红包玩家
    message RedPlayer {
        // 玩家信息
        Player player = 1;
        // 赔付金币数
        int32 pay = 2;
        // 抢到金币数
        int32 grab = 3;
        // 抢到金币的手续费
        int32 grab_charge = 4;
        // 赢得金币数
        int32 get = 5;
        // 赢得金币的手续费
        int32 get_charge = 6;
        // 牌面
        repeated int32 mahjong = 7;
        // 抢到红包的时间
        string grab_at = 8;
        // 创建者
        bool creator = 9;
    }

    // ID
    int32 id = 1;
    // 配置
    Lever28RedPaperBagOption option = 2;
    // 已抢红包玩家
    repeated RedPlayer players = 3;
    // 花费多长时间抢完
    int32 used_time = 4;
}

// @comments 红包列表
// @receive
message Lever28UpdateRedPaperBagList {
    // 列表
    repeated Lever28RedPaperBag1 bags = 2;
}

// @comments 抢红包
// @post
message Lever28Grab {
    // 红包 ID
    int32 id = 1;
}

// @comments 抢红包失败
// @receive
message Lever28GrabFailed {
    // 原因
    // 0 未知
    // 1 红包不存在
    // 2 金币不足
    // 3 人数已满
    int32 reason = 1;
}

// @comments 抢红包成功
// @receive
message Lever28GrabSuccess {}

// @comments 离开当前红包
// @post
message Lever28Leave {}

// @comments 红包剩余时间
// @receive
message Lever28RedPaperBagCountdown {
    // 时间
    int32 number = 1;
}

// @comments 红包详情刷新
// @receive
message Lever28UpdateRedPaperBag {
    // 红包详情
    Lever28RedPaperBag2 bag = 1;
}

// @comments 获取红包结果
// @rpc response=Lever28GetRedPaperBagResultResponse
message Lever28GetRedPaperBagResultRequest {}

// @comments 获取红包结果
message Lever28GetRedPaperBagResultResponse {
    // 结果
    Lever28RedPaperBag3 bag = 2;
}

// @comments 红包销毁
// @receive
message Lever28RedPaperBagDestory {
    int32 id = 1;
}

// @comments 获取红包历史
// @rpc response=Lever28GetHistoryResponse
message Lever28GetHistoryRequest {}

// @comments 获取红包历史结果
message Lever28GetHistoryResponse {
    // 我抢的
    repeated Lever28RedPaperBag3 grabs = 2;
    // 我发的
    repeated Lever28RedPaperBag3 hands = 3;
}

// @comments --------------------------------------↑二八杠↑-----------------------------------------

// @comments 创建房间
// @post
message GomokuCreateRoom {}

// @comments 创建房间失败
// @receive
message GomokuCreateRoomFailed {
    // 原因
    // 0 未知
    // 1 金币不足
    // 2 已在房间
    int32 reason = 1;
}

// @comments 房间已创建
// @receive
message GomokuRoomCreated {
    // 房间 ID
    int32 room_id = 1;
}

// @comments 加入房间
// @post
message GomokuJoinRoom {
    // 房间 ID
    int32 room_id = 1;
}

// @comments 加入房间失败
// @receive
message GomokuJoinRoomFailed {
    // 原因
    // 0 未知
    // 1 房间不存在
    // 2 金币不足
    // 3 已在房间
    // 4 人已满
    int32 reason = 1;
}

// @comments 已进入房间
// @receive
message GomokuRoomEntered {}

// @comments 设置学费
// @post
message GomokuSetCost {
    int32 cost = 1;
}

// @comments 设置学费失败
// @receive
message GomokuSetRoomCostFailed {
    // 原因
    // 0 未知
    // 1 非合法
    // 2 学生金币不足
    // 3 不在房间
    // 4 没有权限
    int32 reason = 1;
}

// @comments 房间信息
message GomokuRoom {
    // 房间 ID
    int32 id = 1;
    // 创建者
    Player creator = 2;
    // 学生
    Player student = 3;
    // 学费
    int32 cost = 4;
}

// @comments 更新房间信息
// @receive
message GomokuUpdateRoom {
    // 房间
    GomokuRoom room = 1;
}

// @comments 离开房间
// @post
message GomokuLeave {}

// @comments 已离开房间
// @receive
message GomokuLeft {}

// @comments 解散房间
// @post
message GomokuDismiss {}

// @comments 因房间解散已离开房间
// @receive
message GomokuLeftByDismiss {}

// @comments 开始游戏
// @post
message GomokuStart {}

// @comments 游戏已开始
// @receive
message GomokuStarted {}

// @comments 更新回合
// @receive
message GomokuUpdateRound {
    // 回合数
    int32 round_number = 1;
    // 盘面
    // 15 * 15
    repeated int32 board = 2;
}

// @comments 走棋
// @receive
message GomokuRequirePlay {
    // 是否自己走棋
    bool is = 1;
}

// @comments 走棋倒计时
// @receive
message GomokuUpdatePlayCountdown {
    // 时间
    int32 number = 1;
    // 是否是自己
    bool is = 2;
}

// @comments 走棋
// @post
message GomokuPlay {
    // 15 * 15
    // 1 - 15
    int32 x = 1;
    int32 y = 2;
}

// @comments 认输
// @post
message GomokuSurrender {}

// @comments 你赢了
// @receive
message GomokuVictory {}

// @comments 你输了
// @receive
message GomokuLost {}

// @comments 五子棋战绩
message GomokuRecord {
    // 对手玩家 ID
    Player player_id = 1;
    // 学费
    int32 cost = 3;
    // 时间
    string created_at = 4;
}
// @comments 查询五子棋战绩请求
// @rpc response=GomokuGetRecordResponse
message GomokuGetRecordRequest {}

// @comments 查询五子棋战绩结果
message GomokuGetRecordResponse {
    // 结果
    repeated GomokuRecord records = 1;
}

// --------------------------------------↑五子棋↑-----------------------------------------